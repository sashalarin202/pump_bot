const WebSocket = require('ws');
const axios = require('axios');

// –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Telegram
const TELEGRAM_TOKEN = '8087924083:AAEPsBIU4QEuW1hv2mQkc-b8EP7H8Qe0FL0';
const CHAT_ID = '440662174';

// –•—Ä–∞–Ω–∏–ª–∏—â–µ —Ü–µ–Ω, –≤—Ä–µ–º–µ–Ω–∏ –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
const tokenData = {};
let PRICE_CHANGE_THRESHOLD = 1;
let CHECK_INTERVAL = 5 * 60 * 1000; // –ò–Ω—Ç–µ—Ä–≤–∞–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: 5 –º–∏–Ω—É—Ç

// –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram
async function sendToTelegram(message) {
  const url = `https://api.telegram.org/bot${TELEGRAM_TOKEN}/sendMessage`;
  try {
    console.log(`–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram: ${message}`);
    await axios.post(url, {
      chat_id: CHAT_ID,
      text: message,
      parse_mode: 'MarkdownV2'
    });
    console.log('–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram:', message);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', error.response ? error.response.data.description : error.message);
  }
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–æ–π —Ü–µ–Ω—ã
async function getHistoricalPrice(symbol, periodInMillis) {
  const now = Date.now();
  const startTime = now - periodInMillis;

  try {
    console.log(`–ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–æ–π —Ü–µ–Ω—ã –¥–ª—è ${symbol}...`);
    const response = await axios.get(`https://api.binance.com/api/v3/klines`, {
      params: {
        symbol: symbol,
        interval: '1m',
        startTime: startTime,
        endTime: now,
        limit: 1,
      }
    });

    const historicalPrice = parseFloat(response.data[0][4]); // –ó–∞–∫—Ä—ã—Ç–∞—è —Ü–µ–Ω–∞
    console.log(`–ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∞—è —Ü–µ–Ω–∞ –¥–ª—è ${symbol}: ${historicalPrice}`);
    return historicalPrice;
  } catch (error) {
    console.error(`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω—ã –¥–ª—è ${symbol}:`, error);
    return null;
  }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ç–æ–∫–µ–Ω–æ–≤
function checkTokens() {
  const now = Date.now();

  for (const symbol in tokenData) {
    const { lastNotificationTime, historicalPrice } = tokenData[symbol];
    const timeSinceLastNotify = now - lastNotificationTime;

    if (timeSinceLastNotify >= CHECK_INTERVAL) {
      const currentPrice = tokenData[symbol].currentPrice;
      const priceChangePercent = ((currentPrice - historicalPrice) / historicalPrice) * 100;

      if (priceChangePercent >= PRICE_CHANGE_THRESHOLD) {
        const url = `https://www.binance.com/en/trade/${symbol.slice(0, 3)}${symbol.slice(3).replace('_', '')}`;
        const message = `Binance\nüü¢ Long ${symbol}\n–¶–µ–Ω–∞ ${currentPrice.toFixed(6)}\n–ü—Ä–æ—Ü–µ–Ω—Ç –∏–∑–º–µ–Ω–∏–ª—Å—è –Ω–∞ ${priceChangePercent.toFixed(2)}%\n[–ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ Binance](${url})`;
        const escapedMessage = message.replace(/\./g, '\\.');

        sendToTelegram(escapedMessage);

        // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        tokenData[symbol].lastNotificationTime = now;
      }
    }
  }
}

// –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
setInterval(checkTokens, CHECK_INTERVAL);

// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ WebSocket Binance
const ws = new WebSocket('wss://stream.binance.com:9443/ws/!ticker');

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π WebSocket
ws.on('message', (data) => {
  const ticker = JSON.parse(data);
  const symbol = ticker.s;

  // –§–∏–ª—å—Ç—Ä—É–µ–º –º–æ–Ω–µ—Ç—ã, —Ç–æ—Ä–≥—É—é—â–∏–µ—Å—è —Å USDT
  if (!symbol.endsWith('USDT')) return;

  const currentPrice = parseFloat(ticker.c);

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å –¥–ª—è –º–æ–Ω–µ—Ç—ã
  if (!tokenData[symbol]) {
    getHistoricalPrice(symbol, CHECK_INTERVAL).then((historicalPrice) => {
      if (historicalPrice) {
        tokenData[symbol] = {
          historicalPrice,
          currentPrice,
          lastNotificationTime: 0
        };
        console.log(`–î–æ–±–∞–≤–ª–µ–Ω —Ç–æ–∫–µ–Ω ${symbol}: –ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∞—è —Ü–µ–Ω–∞ ${historicalPrice}`);
      }
    });
  } else {
    // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É
    tokenData[symbol].currentPrice = currentPrice;
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ WebSocket
ws.on('error', (error) => {
  console.error('–û—à–∏–±–∫–∞ WebSocket:', error.message);
});

// –ó–∞–∫—Ä—ã—Ç–∏–µ WebSocket-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
ws.on('close', () => {
  console.log('–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ. –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ...');
  setTimeout(() => {
    process.exit(1); // –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
  }, 1000);
});
