const WebSocket = require('ws');
const axios = require('axios');

// –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Telegram
const TELEGRAM_TOKEN = '8087924083:AAEPsBIU4QEuW1hv2mQkc-b8EP7H8Qe0FL0';
const CHAT_ID = '440662174';

// –•—Ä–∞–Ω–∏–ª–∏—â–µ —Ü–µ–Ω –∏ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –º–µ—Ç–æ–∫
const historicalPrices = {};
let PRICE_CHANGE_THRESHOLD = 4;
let HISTORY_PERIOD = 60 * 60 * 1000; // 1 —á–∞—Å

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–Ω–æ–ø–∫–∞–º–∏ –≤ Telegram
async function sendToTelegramWithButtons(message, keyboard) {
  const url = `https://api.telegram.org/bot${TELEGRAM_TOKEN}/sendMessage`;
  try {
    console.log(`–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram: ${message}`);
    await axios.post(url, {
      chat_id: CHAT_ID,
      text: message,
      parse_mode: 'MarkdownV2',
      reply_markup: {
        keyboard: keyboard,
        resize_keyboard: true,
        one_time_keyboard: false
      }
    });
    console.log('–°–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram:', message);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–Ω–æ–ø–∫–∞–º–∏ –≤ Telegram:', error.response ? error.response.data.description : error.message);
  }
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–æ–π —Ü–µ–Ω—ã –¥–ª—è –º–æ–Ω–µ—Ç—ã –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –≤—Ä–µ–º–µ–Ω–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 2 –≥–æ–¥–∞ –Ω–∞–∑–∞–¥)
async function getHistoricalPrice(symbol, periodInMillis) {
  const now = Date.now();
  const startTime = now - periodInMillis; // –í—ã—á–∏—Å–ª—è–µ–º –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ (2 –≥–æ–¥–∞ –Ω–∞–∑–∞–¥)

  try {
    console.log(`–ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–æ–π —Ü–µ–Ω—ã –¥–ª—è ${symbol} –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 2 –≥–æ–¥–∞...`);
    const response = await axios.get(`https://api.binance.com/api/v3/klines`, {
      params: {
        symbol: symbol,
        interval: '1m', // 1 –¥–µ–Ω—å
        startTime: startTime,
        endTime: now,
        limit: 1, // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ª—å–∫–æ –æ–¥–Ω—É —Ü–µ–Ω—É –Ω–∞ –Ω–∞—á–∞–ª–æ –ø–µ—Ä–∏–æ–¥–∞
      }
    });

    const historicalPrice = parseFloat(response.data[0][4]); // –ó–∞–∫—Ä—ã—Ç–∞—è —Ü–µ–Ω–∞ (close price) –ø–µ—Ä–≤–æ–≥–æ –¥–Ω—è
    console.log(`–ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∞—è —Ü–µ–Ω–∞ –¥–ª—è ${symbol}: ${historicalPrice}`);
    return historicalPrice;
  } catch (error) {
    console.error(`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–æ–π —Ü–µ–Ω—ã –¥–ª—è ${symbol}:`, error);
    return null;
  }
}

// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ WebSocket Binance
const ws = new WebSocket('wss://stream.binance.com:9443/ws/!ticker');

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π WebSocket
ws.on('message', (data) => {
  const ticker = JSON.parse(data);

  const symbol = ticker.s; // –°–∏–º–≤–æ–ª –º–æ–Ω–µ—Ç—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, BTCUSDT)
  console.log(`–ü–æ–ª—É—á–µ–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–ª—è –º–æ–Ω–µ—Ç—ã: ${symbol}`);

  // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ –º–æ–Ω–µ—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ —Ç–æ—Ä–≥—É—é—Ç—Å—è —Å USDT
  if (!symbol.endsWith('USDT')) {
    console.log(`–ú–æ–Ω–µ—Ç–∞ ${symbol} –Ω–µ —Ç–æ—Ä–≥—É–µ—Ç—Å—è —Å USDT, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º...`);
    return; // –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Å–∏–º–≤–æ–ª—ã, –Ω–µ –∏–º–µ—é—â–∏–µ –ø–∞—Ä—ã —Å USDT
  }

  const currentPrice = parseFloat(ticker.c); // –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞ –º–æ–Ω–µ—Ç—ã

  // –ï—Å–ª–∏ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∞—è —Ü–µ–Ω–∞ –µ—â—ë –Ω–µ –∑–∞–¥–∞–Ω–∞, –ø–æ–ª—É—á–∞–µ–º –µ—ë
  if (!historicalPrices[symbol]) {
    console.log(`–ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∞—è —Ü–µ–Ω–∞ –¥–ª—è ${symbol} –µ—â—ë –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞. –ó–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ...`);
    getHistoricalPrice(symbol, HISTORY_PERIOD).then((historicalPrice) => {
      if (historicalPrice) {
        historicalPrices[symbol] = historicalPrice;

        // –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω—ã
        const priceChangePercent = ((currentPrice - historicalPrice) / historicalPrice) * 100;

        // –ï—Å–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ø–æ—Ä–æ–≥, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        if (priceChangePercent >= PRICE_CHANGE_THRESHOLD) {
          const url = `https://www.binance.com/en/trade/${symbol.slice(0, 3)}${symbol.slice(3).replace('_', '')}`;
          const message = `Binance\nüü¢Long ${symbol}\n–¶–µ–Ω–∞ ${currentPrice.toFixed(6)}\n–ü—Ä–æ—Ü–µ–Ω—Ç –∏–∑–º–µ–Ω–∏–ª—Å—è –Ω–∞ ${priceChangePercent.toFixed(2)}%\n[–ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ Binance](${url})`;
          const escapedMessage = message.replace(/\./g, '\\.');
          sendToTelegramWithButtons(escapedMessage, [
            [{ text: '–ü–µ—Ä–∏–æ–¥' }, { text: 'GAP' }],
          ]);
        }
      }
    });
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ WebSocket
ws.on('error', (error) => {
  console.error('–û—à–∏–±–∫–∞ WebSocket:', error.message);
});

// –ó–∞–∫—Ä—ã—Ç–∏–µ WebSocket-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
ws.on('close', () => {
  console.log('–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å WebSocket –∑–∞–∫—Ä—ã—Ç–æ. –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ...');
  setTimeout(() => {
    process.exit(1); // –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
  }, 1000);
});

