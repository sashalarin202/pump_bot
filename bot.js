const WebSocket = require('ws');
const axios = require('axios');

// –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Telegram
const TELEGRAM_TOKEN = '8087924083:AAEPsBIU4QEuW1hv2mQkc-b8EP7H8Qe0FL0';
const CHAT_ID = '440662174';

// –•—Ä–∞–Ω–∏–ª–∏—â–µ –Ω–∞—á–∞–ª—å–Ω—ã—Ö —Ü–µ–Ω –∏ –ø–æ—Ä–æ–≥–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è
const initialPrices = {};
let PRICE_CHANGE_THRESHOLD = 1; // –ù–∞—á–∞–ª—å–Ω—ã–π –ø–æ—Ä–æ–≥

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–Ω–æ–ø–∫–∞–º–∏ –≤ Telegram
async function sendToTelegramWithButtons(message, keyboard) {
  const url = `https://api.telegram.org/bot${TELEGRAM_TOKEN}/sendMessage`;
  try {
    await axios.post(url, {
      chat_id: CHAT_ID,
      text: message,
      parse_mode: 'MarkdownV2', // –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ MarkdownV2
      reply_markup: {
        keyboard: keyboard,
        resize_keyboard: true,
        one_time_keyboard: false
      }
    });
    console.log('–°–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram:', message);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–Ω–æ–ø–∫–∞–º–∏ –≤ Telegram:', error.response.data.description);
  }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –∫–Ω–æ–ø–æ–∫ "–ë–∏—Ä–∂–∞" –∏ "–ù–∞—Å—Ç—Ä–æ–π–∫–∏"
async function sendStartMessage() {
  const keyboard = [
    [{ text: '–ë–∏—Ä–∂–∞' }, { text: '–ù–∞—Å—Ç—Ä–æ–π–∫–∏' }],
  ];
  await sendToTelegramWithButtons('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', keyboard);
}

// –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–∞–Ω–µ–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Å –ø—Ä–æ—Ü–µ–Ω—Ç–∞–º–∏ 1-9%
async function sendSettings() {
  const keyboard = [];
  for (let i = 1; i <= 9; i++) {
    keyboard.push([{ text: `${i}%` }]);
  }
  keyboard.push([{ text: '–ù–∞–∑–∞–¥' }]);
  await sendToTelegramWithButtons('–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ—Ä–æ–≥ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω—ã:', keyboard);
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏ –∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ—Ä–æ–≥–∞
async function handleButtonPress(text) {
  if (text === '–ù–∞—Å—Ç—Ä–æ–π–∫–∏') {
    await sendSettings();
  } else if (text === '–ù–∞–∑–∞–¥') {
    await sendStartMessage();
  } else if (text.endsWith('%')) {
    PRICE_CHANGE_THRESHOLD = parseInt(text);
    await sendToTelegramWithButtons(`–ü–æ—Ä–æ–≥ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω—ã —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ ${PRICE_CHANGE_THRESHOLD}%.`, [
      [{ text: '–ë–∏—Ä–∂–∞' }, { text: '–ù–∞—Å—Ç—Ä–æ–π–∫–∏' }],
    ]);
  }
}

// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ WebSocket Binance
const ws = new WebSocket('wss://stream.binance.com:9443/ws/!ticker');

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π WebSocket
ws.on('message', (data) => {
  const ticker = JSON.parse(data);

  const symbol = ticker.s; // –°–∏–º–≤–æ–ª –º–æ–Ω–µ—Ç—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, BTCUSDT)
  
  // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ –º–æ–Ω–µ—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ —Ç–æ—Ä–≥—É—é—Ç—Å—è —Å USDT
  if (!symbol.endsWith('USDT')) {
    return; // –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Å–∏–º–≤–æ–ª—ã, –Ω–µ –∏–º–µ—é—â–∏–µ –ø–∞—Ä—ã —Å USDT
  }

  const currentPrice = parseFloat(ticker.c); // –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞ –º–æ–Ω–µ—Ç—ã

  // –ï—Å–ª–∏ –Ω–∞—á–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ –Ω–µ –∑–∞–¥–∞–Ω–∞, —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –µ—ë
  if (!initialPrices[symbol]) {
    initialPrices[symbol] = currentPrice;
    return;
  }

  // –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω—ã
  const initialPrice = initialPrices[symbol];
  const priceChangePercent = ((currentPrice - initialPrice) / initialPrice) * 100;

  // –ï—Å–ª–∏ —Ä–æ—Å—Ç —Ü–µ–Ω—ã –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ø–æ—Ä–æ–≥, –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
  if (priceChangePercent >= PRICE_CHANGE_THRESHOLD) {
    // –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ URL –¥–ª—è –ø–∞—Ä—ã –Ω–∞ Binance
    const url = `https://www.binance.com/en/trade/${symbol.slice(0, 3)}_${symbol.slice(3)}`;
    
    // –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –≥–∏–ø–µ—Ä—Å—Å—ã–ª–∫–æ–π –Ω–∞ Binance
    const message = `Binance\nüü¢Long ${symbol}\n–¶–µ–Ω–∞ ${currentPrice.toFixed(6)}\n–ü—Ä–æ—Ü–µ–Ω—Ç –∏–∑–º–µ–Ω–∏–ª—Å—è –Ω–∞ ${priceChangePercent.toFixed(2)}%\n[–ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ Binance](${url})`;
    const escapedMessage = message.replace(/\./g, '\\.');
    sendToTelegramWithButtons(escapedMessage, [
      [{ text: '–ë–∏—Ä–∂–∞' }, { text: '–ù–∞—Å—Ç—Ä–æ–π–∫–∏' }],
    ]);

    // –û–±–Ω–æ–≤–∏—Ç—å –Ω–∞—á–∞–ª—å–Ω—É—é —Ü–µ–Ω—É, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    initialPrices[symbol] = currentPrice;
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ WebSocket
ws.on('error', (error) => {
  console.error('–û—à–∏–±–∫–∞ WebSocket:', error.message);
});

ws.on('close', () => {
  console.log('–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å WebSocket –∑–∞–∫—Ä—ã—Ç–æ. –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ...');
  setTimeout(() => {
    process.exit(1); // –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
  }, 1000);
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, —á–µ—Ä–µ–∑ Telegram API)
const telegramBot = require('node-telegram-bot-api');
const bot = new telegramBot(TELEGRAM_TOKEN, { polling: true });

bot.onText(/\/start/, (msg) => {
  const chatId = msg.chat.id;
  sendStartMessage();
});

bot.on('message', (msg) => {
  const chatId = msg.chat.id;
  const text = msg.text;

  handleButtonPress(text);
});
